{
  "HomePage": {
    "title": "Rubén Hernández Acevedo",
    "subtitle": "Desenvolvedor Full Stack | Apps, Web e IA",
    "description": "Especializado no desenvolvimento de aplicações móveis, soluções web modernas e sistemas de inteligência artificial. Transformo ideias em experiências digitais inovadoras."
  },
  "Navigation": {
    "home": "Início",
    "about": "Sobre",
    "projects": "Projetos",
    "contact": "Contato"
  },
  "Language": {
    "switch": "Mudar idioma",
    "selectLanguage": "Selecionar idioma",
    "spanish": "Espanhol",
    "english": "Inglês",
    "french": "Francês",
    "portuguese": "Português",
    "italian": "Italiano",
    "chinese": "中文"
  },
  "Loader": {
    "loading": "Carregando..."
  },
  "Projects": {
    "title": "Projetos Realizados",
    "subtitle": "Explore alguns dos projetos mais destacados que desenvolvi, desde aplicações web até soluções empresariais.",
    "suncar": {
      "title": "SunCar",
      "description": "Empresa de instalações fotovoltaicas. Soluções inovadoras em energia solar para casas e empresas."
    },
    "playup": {
      "title": "Playup",
      "description": "Gestão de torneios, jogadores e equipas de futebol amador internacional. Plataforma desportiva completa."
    },
    "moneyapp": {
      "title": "MoneyApp",
      "description": "Assistente de finanças pessoais com IA. Gere suas finanças de forma inteligente e automatizada."
    },
    "solarsurvivor": {
      "title": "Solar Survivor",
      "description": "Jogo de simulação de energia solar. Sobreviva e prospere usando tecnologia fotovoltaica sustentável."
    },
    "fintech": {
      "title": "Plataforma FinTech",
      "description": "Plataforma financeira empresarial com análise avançada de dados e dashboard em tempo real para gestão de carteiras."
    }
  },
  "TerminalSection": {
    "title": "Configurando o Ambiente",
    "description": "Instalando as habilidades profissionais que fazem a diferença.",
    "success": "Desenvolvedor full-stack pronto para produção ✨",
    "footer": "O desenvolvimento de software é como resolver puzzles complexos: cada linha de código conta."
  },
  "ResponsiveSection": {
    "title": "Design Responsivo",
    "description": "Cada projeto que desenvolvo está otimizado para funcionar perfeitamente em qualquer dispositivo, desde móveis até desktop.",
    "footer": "A experiência do usuário é consistente independentemente da tela de onde acessa."
  },
  "TabsSection": {
    "title": "Minha Stack Tecnológica Favorita",
    "description": "Se tivesse que escolher uma stack tecnológica favorita para desenvolver um projeto completo, este seria meu arsenal ideal para criar soluções robustas e escaláveis.",
    "fastapi": {
      "description": "Framework Python moderno e rápido para criar APIs robustas com documentação automática e validação de tipos."
    },
    "nextjs": {
      "description": "Framework React de produção com renderização híbrida, otimização automática e experiência de desenvolvimento superior."
    },
    "mongodb": {
      "description": "Base de dados NoSQL escalável e flexível que permite gerir grandes volumes de dados com esquemas dinâmicos."
    },
    "kotlin": {
      "description": "Linguagem moderna para desenvolvimento Android nativo com sintaxe concisa e interoperabilidade com Java."
    },
    "swift": {
      "description": "Linguagem poderosa e intuitiva da Apple para criar aplicações iOS nativas de alto desempenho."
    },
    "railway": {
      "description": "Plataforma de deployment moderna que simplifica o hosting de aplicações com CI/CD automático."
    },
    "figma": {
      "description": "Ferramenta de design colaborativo para criar interfaces de usuário e protótipos interativos profissionais."
    },
    "claude": {
      "description": "Assistente de IA para desenvolvimento que acelera a programação com sugestões inteligentes e geração de código."
    }
  },
  "Technologies": {
    "title": "Competências Técnicas",
    "description": "Minha experiência abrange desde o design UX/UI até a infraestrutura, permitindo-me liderar projetos end-to-end com uma visão integral do desenvolvimento.",
    "techCount": "Tecnologias",
    "yearsExp": "Anos de experiência",
    "additionalInfo": "Minha stack evolui constantemente, sempre explorando novas ferramentas que me permitem criar melhores soluções e manter-me atualizado com as últimas tendências do desenvolvimento.",
    "centerText": "Stack Tech",
    "frontend": {
      "title": "Frontend",
      "description": "Interfaces modernas e responsivas com React, Vue, Next.js para experiências de usuário excepcionais."
    },
    "backend": {
      "title": "Backend",
      "description": "APIs robustas e escaláveis usando Laravel, FastAPI, Python para sistemas empresariais sólidos."
    },
    "mobile": {
      "title": "Mobile",
      "description": "Desenvolvimento nativo com Kotlin, Swift e multiplataforma com tecnologias web para aplicações móveis performantes."
    }
  },
  "ContactSection": {
    "title": "Contacte-me",
    "description": "Tem um projeto em mente ou quer colaborar? Adoraria ouvir sua ideia e ajudá-lo a transformá-la em realidade.",
    "availableTitle": "Disponível para projetos",
    "availableDescription": "Atualmente aceito novos projetos e colaborações. Não hesite em contactar-me para discutir seu próximo desenvolvimento."
  },
  "Actions": {
    "downloadCV": "Baixar CV",
    "viewGitHub": "Ver GitHub"
  },
  "CVDialog": {
    "title": "CV não disponível",
    "description": "Olá! Meu CV ainda não está disponível para download, mas muito em breve estará. Convido-o a voltar em breve para obtê-lo.",
    "actionText": "Entendido",
    "close": "Fechar"
  },
  "Certificates": {
    "title": "Certificações",
    "description": "Como graduado em engenharia informática, sou apaixonado por aprender e melhorar constantemente. Aqui estão alguns dos cursos e certificações que completei no meu percurso de crescimento profissional.",
    "pdfNotAvailable": "PDF não disponível para este certificado",
    "viewPdf": "PDF",
    "verify": "Verificar",
    "certificates": {
      "claude-code": {
        "title": "Claude Code em Ação",
        "provider": "Anthropic Education",
        "description": "Integração de assistente IA para programação e otimização de fluxo de trabalho"
      },
      "laravel": {
        "title": "Introdução ao Laravel 9",
        "provider": "Platzi",
        "description": "Fundamentos de desenvolvimento com framework PHP moderno"
      },
      "english": {
        "title": "Percurso de Aprendizagem de Inglês",
        "provider": "Platzi",
        "description": "Certificação completa de competência na língua inglesa"
      },
      "wordpress": {
        "title": "Criação de Plugins WordPress",
        "provider": "Platzi",
        "description": "Desenvolvimento e arquitetura de plugins WordPress personalizados"
      },
      "trading": {
        "title": "Análise Técnica para Investimentos",
        "provider": "Platzi",
        "description": "Curso intermediário de investimento para análise de risco na bolsa de valores"
      },
      "html-css": {
        "title": "HTML e CSS Prático",
        "provider": "Platzi",
        "description": "Fundamentos práticos de desenvolvimento web HTML e CSS"
      },
      "dark-mode": {
        "title": "Design em Modo Escuro",
        "provider": "Platzi",
        "description": "Princípios de design e implementação do modo escuro"
      },
      "mobile-first": {
        "title": "Mobile First - Design Responsivo",
        "provider": "Platzi",
        "description": "Metodologia de design web responsivo com abordagem mobile-first"
      }
    }
  },
  "BestPractices": {
    "title": "Melhores Práticas de Desenvolvimento",
    "subtitle": "Exemplos reais de princípios SOLID, Clean Code, Segurança e Performance que aplico nos meus projetos para criar código mantenível e escalável.",
    "description": "Essas práticas garantem que o código seja fácil de manter, testar e estender, resultando em aplicações mais robustas e equipas de desenvolvimento mais produtivas.",
    "practices": "Princípios",
    "selectFile": "Selecione um arquivo para ver o exemplo",
    "files": {
      "singleResponsibility": "ResponsabilidadeUnica.ts",
      "openClosed": "AbertoFechado.ts", 
      "dependencyInversion": "InversaoDependencias.ts",
      "meaningfulNames": "NomesSignificativos.ts",
      "smallFunctions": "FuncoesPequenas.ts",
      "avoidComments": "CodigoAutoDocumentado.ts",
      "inputValidation": "ValidacaoEntradas.ts",
      "secureSecrets": "GestaoSecretos.ts",
      "avoidNPlusOne": "EvitarNMaisUm.ts",
      "efficientCaching": "CacheEficiente.ts"
    },
    "examples": {
      "single-responsibility": {
        "title": "Princípio da Responsabilidade Única",
        "description": "Cada classe deve ter apenas uma razão para mudar. Separamos as responsabilidades em classes especializadas."
      },
      "open-closed": {
        "title": "Princípio Aberto/Fechado",
        "description": "As entidades devem estar abertas para extensão, mas fechadas para modificação. Usamos abstrações para novas funcionalidades."
      },
      "dependency-inversion": {
        "title": "Princípio da Inversão de dependências",
        "description": "Dependemos de abstrações, não de implementações concretas. Isto facilita os testes e a flexibilidade."
      },
      "meaningful-names": {
        "title": "Nomes Significativos",
        "description": "Usar nomes descritivos e claros que expressem a intenção do código, eliminando a necessidade de comentários explicativos."
      },
      "small-functions": {
        "title": "Funções Pequenas",
        "description": "Dividir funções grandes em funções pequenas e especializadas que realizam uma única tarefa eficazmente."
      },
      "avoid-comments": {
        "title": "Código Auto-Documentado",
        "description": "Escrever código que se explique por si mesmo através de nomes claros e estrutura lógica, minimizando comentários."
      },
      "input-validation": {
        "title": "Validação de Entradas",
        "description": "Implementar validação e sanitização rigorosas de dados de entrada para prevenir vulnerabilidades de segurança."
      },
      "secure-secrets": {
        "title": "Gestão Segura de Segredos",
        "description": "Gerir credenciais e segredos de forma segura usando variáveis de ambiente e serviços especializados."
      },
      "avoid-n-plus-1": {
        "title": "Evitar Consultas N+1",
        "description": "Otimizar consultas de base de dados para evitar o problema N+1 usando joins e includes eficientes."
      },
      "efficient-caching": {
        "title": "Cache Eficiente",
        "description": "Implementar estratégias de cache inteligentes para melhorar o desempenho e reduzir a carga na base de dados."
      }
    }
  },
  "CodeExamples": {
    "singleResponsibility": {
      "before": "// ❌ Viola o princípio da responsabilidade única\nclass UserService {\n  async createUser(userData: any) {\n    // Validação\n    if (!userData.email || !userData.password) {\n      throw new Error('Email and password are required');\n    }\n    \n    // Envio de email\n    await this.sendWelcomeEmail(userData.email);\n    \n    // Gravação na base de dados\n    const user = await db.users.create(userData);\n    \n    // Logging\n    console.log(`User created: ${user.id}`);\n    \n    return user;\n  }\n  \n  private async sendWelcomeEmail(email: string) {\n    // Lógica de envio de email\n  }\n}",
      "after": "// ✅ Respeita o princípio da responsabilidade única\nclass UserService {\n  constructor(\n    private validator: UserValidator, // [!code ++]\n    private emailService: EmailService, // [!code ++]\n    private userRepository: UserRepository, // [!code ++]\n    private logger: Logger // [!code ++]\n  ) {}\n\n  async createUser(userData: any): Promise<User> {\n    this.validator.validate(userData); // [!code focus]\n    \n    const user = await this.userRepository.create(userData); // [!code focus]\n    \n    await this.emailService.sendWelcomeEmail(user.email); // [!code focus]\n    this.logger.log(`User created: ${user.id}`); // [!code focus]\n    \n    return user;\n  }\n}\n\nclass UserValidator { // [!code ++]\n  validate(userData: any): void { // [!code ++]\n    if (!userData.email || !userData.password) { // [!code ++]\n      throw new Error('Email and password are required'); // [!code ++]\n    } // [!code ++]\n  } // [!code ++]\n} // [!code ++]"
    },
    "openClosed": {
      "before": "// ❌ Viola o princípio aberto/fechado\nclass PaymentProcessor {\n  processPayment(amount: number, method: string) {\n    if (method === 'credit-card') {\n      return this.processCreditCard(amount);\n    } else if (method === 'paypal') {\n      return this.processPaypal(amount);\n    } else if (method === 'bank-transfer') {\n      return this.processBankTransfer(amount);\n    }\n    throw new Error('Unsupported payment method');\n  }\n  \n  private processCreditCard(amount: number) {\n    // Lógica para cartão de crédito\n  }\n  \n  private processPaypal(amount: number) {\n    // Lógica para PayPal\n  }\n  \n  private processBankTransfer(amount: number) {\n    // Lógica para transferência bancária\n  }\n}",
      "after": "// ✅ Respeita o princípio aberto/fechado\ninterface PaymentMethod { // [!code ++]\n  process(amount: number): Promise<PaymentResult>; // [!code ++]\n} // [!code ++]\n\nclass CreditCardPayment implements PaymentMethod { // [!code ++]\n  async process(amount: number): Promise<PaymentResult> { // [!code ++]\n    // Lógica específica para cartão de crédito // [!code ++]\n    return { success: true, transactionId: 'cc_123' }; // [!code ++]\n  } // [!code ++]\n} // [!code ++]\n\nclass PaypalPayment implements PaymentMethod { // [!code ++]\n  async process(amount: number): Promise<PaymentResult> { // [!code ++]\n    // Lógica específica para PayPal // [!code ++]\n    return { success: true, transactionId: 'pp_456' }; // [!code ++]\n  } // [!code ++]\n} // [!code ++]\n\nclass PaymentProcessor {\n  constructor(private paymentMethod: PaymentMethod) {} // [!code focus]\n  \n  async processPayment(amount: number): Promise<PaymentResult> { // [!code focus]\n    return await this.paymentMethod.process(amount); // [!code focus]\n  } // [!code focus]\n}"
    },
    "dependencyInversion": {
      "before": "// ❌ Viola o princípio da inversão de dependências\nimport { MySQLDatabase } from './MySQLDatabase';\nimport { EmailProvider } from './EmailProvider';\n\nclass OrderService {\n  private database: MySQLDatabase;\n  private emailProvider: EmailProvider;\n  \n  constructor() {\n    this.database = new MySQLDatabase(); // Dependência direta\n    this.emailProvider = new EmailProvider(); // Dependência direta\n  }\n  \n  async createOrder(orderData: any) {\n    const order = await this.database.save(orderData);\n    await this.emailProvider.sendConfirmation(order.customerEmail);\n    return order;\n  }\n}",
      "after": "// ✅ Respeita o princípio da inversão de dependências\ninterface Database { // [!code ++]\n  save(data: any): Promise<any>; // [!code ++]\n} // [!code ++]\n\ninterface NotificationService { // [!code ++]\n  sendConfirmation(email: string): Promise<void>; // [!code ++]\n} // [!code ++]\n\nclass OrderService {\n  constructor(\n    private database: Database, // Abstração // [!code focus]\n    private notificationService: NotificationService // Abstração // [!code focus]\n  ) {}\n  \n  async createOrder(orderData: any) {\n    const order = await this.database.save(orderData); // [!code focus]\n    await this.notificationService.sendConfirmation(order.customerEmail); // [!code focus]\n    return order;\n  }\n}\n\n// Implementações concretas // [!code ++]\nclass MySQLDatabase implements Database { // [!code ++]\n  async save(data: any): Promise<any> { // [!code ++]\n    // Implementação específica MySQL // [!code ++]\n  } // [!code ++]\n} // [!code ++]\n\nclass EmailNotificationService implements NotificationService { // [!code ++]\n  async sendConfirmation(email: string): Promise<void> { // [!code ++]\n    // Implementação específica email // [!code ++]\n  } // [!code ++]\n} // [!code ++]"
    },
    "meaningfulNames": {
      "before": "// ❌ Nomes pouco descritivos\nclass Calc {\n  private data: any[] = [];\n  \n  process(d: any): number {\n    let r = 0;\n    let t = 0;\n    \n    for (let i = 0; i < d.length; i++) {\n      if (d[i].type === 1) {\n        r += d[i].amt * d[i].qty;\n        t += d[i].amt * d[i].qty * 0.15;\n      }\n    }\n    \n    return r + t;\n  }\n  \n  validate(x: any): boolean {\n    return x && x.amt > 0 && x.qty > 0;\n  }\n}",
      "after": "// ✅ Nomes descritivos e significativos\nclass ProductPriceCalculator { // [!code ++]\n  private products: Product[] = []; // [!code ++]\n  \n  calculateTotalPrice(products: Product[]): number { // [!code ++]\n    let subtotal = 0; // [!code ++]\n    let impostos = 0; // [!code ++]\n    \n    for (const produto of products) { // [!code ++]\n      if (produto.isActive) { // [!code ++]\n        const totalItem = produto.price * produto.quantity; // [!code ++]\n        subtotal += totalItem; // [!code ++]\n        impostos += totalItem * TAXA_IMPOSTO; // [!code ++]\n      } // [!code ++]\n    } // [!code ++]\n    \n    return subtotal + impostos; // [!code ++]\n  } // [!code ++]\n  \n  isValidProduct(produto: Product): boolean { // [!code ++]\n    return produto && produto.price > 0 && produto.quantity > 0; // [!code ++]\n  } // [!code ++]\n} // [!code ++]\n\nconst TAXA_IMPOSTO = 0.15; // [!code ++]\n\ninterface Product { // [!code ++]\n  price: number; // [!code ++]\n  quantity: number; // [!code ++]\n  isActive: boolean; // [!code ++]\n} // [!code ++]"
    },
    "smallFunctions": {
      "before": "// ❌ Função grande que faz muitas coisas\nasync function registerUser(userData: any) {\n  // Validação\n  if (!userData.email || !userData.email.includes('@')) {\n    throw new Error('Invalid email');\n  }\n  if (!userData.password || userData.password.length < 8) {\n    throw new Error('Password too short');\n  }\n  if (!userData.name || userData.name.trim().length === 0) {\n    throw new Error('Name is required');\n  }\n  \n  // Hash da senha\n  const salt = await bcrypt.genSalt(10);\n  const hashedPassword = await bcrypt.hash(userData.password, salt);\n  \n  // Criar utilizador\n  const user = await db.users.create({\n    email: userData.email.toLowerCase(),\n    password: hashedPassword,\n    name: userData.name.trim(),\n    createdAt: new Date()\n  });\n  \n  // Enviar email de boas-vindas\n  const emailTemplate = `Bem-vindo ${user.name}! Obrigado por se juntar a nós.`;\n  await emailService.send(user.email, 'Bem-vindo!', emailTemplate);\n  \n  // Log da atividade\n  await db.logs.create({\n    action: 'USER_REGISTERED',\n    userId: user.id,\n    timestamp: new Date()\n  });\n  \n  return user;\n}",
      "after": "// ✅ Funções pequenas com responsabilidades específicas\nasync function registerUser(userData: UserRegistrationData): Promise<User> {\n  await validateUserData(userData); // [!code focus]\n  \n  const hashedPassword = await hashPassword(userData.password); // [!code focus]\n  const user = await createUser(userData, hashedPassword); // [!code focus]\n  \n  await sendWelcomeEmail(user); // [!code focus]\n  await logUserRegistration(user.id); // [!code focus]\n  \n  return user;\n}\n\nasync function validateUserData(userData: UserRegistrationData): Promise<void> { // [!code ++]\n  validateEmail(userData.email); // [!code ++]\n  validatePassword(userData.password); // [!code ++]\n  validateName(userData.name); // [!code ++]\n} // [!code ++]\n\nfunction validateEmail(email: string): void { // [!code ++]\n  if (!email || !email.includes('@')) { // [!code ++]\n    throw new Error('Invalid email'); // [!code ++]\n  } // [!code ++]\n} // [!code ++]\n\nasync function hashPassword(password: string): Promise<string> { // [!code ++]\n  const salt = await bcrypt.genSalt(10); // [!code ++]\n  return bcrypt.hash(password, salt); // [!code ++]\n} // [!code ++]\n\nasync function createUser(userData: UserRegistrationData, hashedPassword: string): Promise<User> { // [!code ++]\n  return db.users.create({ // [!code ++]\n    email: userData.email.toLowerCase(), // [!code ++]\n    password: hashedPassword, // [!code ++]\n    name: userData.name.trim(), // [!code ++]\n    createdAt: new Date() // [!code ++]\n  }); // [!code ++]\n} // [!code ++]"
    },
    "avoidComments": {
      "before": "// ❌ Código que requer muitos comentários para ser entendido\nclass InventoryManager {\n  // Verifica se o produto está disponível\n  check(p: Product, q: number): boolean {\n    // Obter nível de stock atual\n    const s = this.getStock(p.id);\n    \n    // Verificar se temos stock suficiente\n    // Também precisamos considerar itens reservados\n    const r = this.getReserved(p.id);\n    \n    // Disponível = stock - reservado\n    const a = s - r;\n    \n    // Retorna true se tivermos suficiente\n    return a >= q;\n  }\n  \n  // Atualiza o inventário quando o pedido é feito\n  update(pid: number, qty: number) {\n    // Obter valores atuais\n    const current = this.inventory[pid];\n    \n    // Subtrair a quantidade\n    current.stock -= qty;\n    \n    // Adicionar aos reservados\n    current.reserved += qty;\n    \n    // Atualizar timestamp\n    current.lastUpdated = Date.now();\n  }\n}",
      "after": "// ✅ Código auto-documentado sem necessidade de comentários\nclass InventoryManager {\n  isProductAvailable(produto: Product, quantidadeSolicitada: number): boolean { // [!code ++]\n    const stockAtual = this.getCurrentStock(produto.id); // [!code ++]\n    const quantidadeReservada = this.getReservedQuantity(produto.id); // [!code ++]\n    const quantidadeDisponivel = stockAtual - quantidadeReservada; // [!code ++]\n    \n    return quantidadeDisponivel >= quantidadeSolicitada; // [!code ++]\n  } // [!code ++]\n  \n  reserveProductForOrder(productId: number, quantidade: number): void { // [!code ++]\n    const registoInventario = this.getInventoryRecord(productId); // [!code ++]\n    \n    registoInventario.decreaseStock(quantidade); // [!code ++]\n    registoInventario.increaseReserved(quantidade); // [!code ++]\n    registoInventario.updateTimestamp(); // [!code ++]\n  } // [!code ++]\n  \n  private getCurrentStock(productId: number): number { // [!code ++]\n    return this.inventory[productId]?.stock ?? 0; // [!code ++]\n  } // [!code ++]\n  \n  private getReservedQuantity(productId: number): number { // [!code ++]\n    return this.inventory[productId]?.reserved ?? 0; // [!code ++]\n  } // [!code ++]\n  \n  private getInventoryRecord(productId: number): InventoryRecord { // [!code ++]\n    return this.inventory[productId]; // [!code ++]\n  } // [!code ++]\n}"
    },
    "inputValidation": {
      "before": "// ❌ Sem validação de entrada - vulnerável a ataques\nclass AuthController {\n  async login(req: any, res: any) {\n    const { email, password } = req.body;\n    \n    // Procurar utilizador diretamente sem validação\n    const user = await db.query(\n      `SELECT * FROM users WHERE email = '${email}'`\n    );\n    \n    // Comparar senha em texto simples\n    if (user && user.password === password) {\n      // Criar token sem validação\n      const token = jwt.sign({ id: user.id }, 'secret');\n      \n      res.json({ token, user });\n    } else {\n      res.status(401).json({ error: 'Invalid credentials' });\n    }\n  }\n  \n  async updateProfile(req: any, res: any) {\n    const { name, bio } = req.body;\n    \n    // Atualizar sem sanitizar\n    await db.query(\n      `UPDATE users SET name = '${name}', bio = '${bio}' WHERE id = ${req.user.id}`\n    );\n    \n    res.json({ success: true });\n  }\n}",
      "after": "// ✅ Com validação e sanitização adequadas\nclass AuthController {\n  async login(req: Request, res: Response) { // [!code ++]\n    const { email, password } = this.validateLoginInput(req.body); // [!code ++]\n    \n    const user = await this.userRepository.findByEmail(email); // [!code ++]\n    \n    if (!user || !await this.passwordService.verify(password, user.hashedPassword)) { // [!code ++]\n      throw new UnauthorizedError('Invalid credentials'); // [!code ++]\n    } // [!code ++]\n    \n    const token = this.tokenService.generateSecureToken(user.id); // [!code ++]\n    \n    res.json({ // [!code ++]\n      token, // [!code ++]\n      user: this.sanitizeUserData(user) // [!code ++]\n    }); // [!code ++]\n  } // [!code ++]\n  \n  async updateProfile(req: Request, res: Response) { // [!code ++]\n    const userId = this.validateUserId(req.user.id); // [!code ++]\n    const { name, bio } = this.validateProfileInput(req.body); // [!code ++]\n    \n    const dadosSanitizados = { // [!code ++]\n      name: this.sanitizer.cleanString(name), // [!code ++]\n      bio: this.sanitizer.cleanString(bio) // [!code ++]\n    }; // [!code ++]\n    \n    await this.userRepository.updateProfile(userId, dadosSanitizados); // [!code ++]\n    \n    res.json({ success: true }); // [!code ++]\n  } // [!code ++]\n  \n  private validateLoginInput(body: any): LoginData { // [!code ++]\n    const schema = z.object({ // [!code ++]\n      email: z.string().email().max(255), // [!code ++]\n      password: z.string().min(8).max(128) // [!code ++]\n    }); // [!code ++]\n    \n    return schema.parse(body); // [!code ++]\n  } // [!code ++]\n}"
    },
    "secureSecrets": {
      "before": "// ❌ Segredos codificados e expostos\nclass DatabaseConfig {\n  private connectionString = \"postgresql://admin:password123@localhost:5432/mydb\";\n  \n  private jwtSecret = \"my-super-secret-key\";\n  \n  private apiKeys = {\n    stripe: \"sk_live_abc123def456ghi789\",\n    sendgrid: \"SG.xyz789.abc123def456\",\n    aws: \"AKIAIOSFODNN7EXAMPLE\"\n  };\n  \n  async connect() {\n    console.log(\"A conectar a:\", this.connectionString);\n    return pg.connect(this.connectionString);\n  }\n  \n  generateToken(payload: any) {\n    return jwt.sign(payload, this.jwtSecret, { expiresIn: '24h' });\n  }\n  \n  async sendEmail(to: string, subject: string, body: string) {\n    const client = new SendGrid(this.apiKeys.sendgrid);\n    return client.send({ to, subject, body });\n  }\n}",
      "after": "// ✅ Gestão segura de segredos usando variáveis de ambiente\nclass DatabaseConfig {\n  private readonly connectionString: string; // [!code ++]\n  private readonly jwtSecret: string; // [!code ++]\n  private readonly apiKeys: ApiKeys; // [!code ++]\n  \n  constructor() { // [!code ++]\n    this.validateEnvironment(); // [!code ++]\n    \n    this.connectionString = this.buildConnectionString(); // [!code ++]\n    this.jwtSecret = this.getRequiredEnvVar('JWT_SECRET'); // [!code ++]\n    this.apiKeys = this.loadApiKeys(); // [!code ++]\n  } // [!code ++]\n  \n  async connect(): Promise<pg.Client> { // [!code ++]\n    return pg.connect(this.connectionString); // [!code ++]\n  } // [!code ++]\n  \n  generateToken(payload: any): string { // [!code ++]\n    if (!this.jwtSecret) { // [!code ++]\n      throw new Error('JWT secret not configured'); // [!code ++]\n    } // [!code ++]\n    \n    return jwt.sign(payload, this.jwtSecret, { expiresIn: '24h' }); // [!code ++]\n  } // [!code ++]\n  \n  private buildConnectionString(): string { // [!code ++]\n    const host = this.getRequiredEnvVar('DB_HOST'); // [!code ++]\n    const port = this.getRequiredEnvVar('DB_PORT'); // [!code ++]\n    const database = this.getRequiredEnvVar('DB_NAME'); // [!code ++]\n    const username = this.getRequiredEnvVar('DB_USER'); // [!code ++]\n    const password = this.getRequiredEnvVar('DB_PASSWORD'); // [!code ++]\n    \n    return `postgresql://${username}:${password}@${host}:${port}/${database}`; // [!code ++]\n  } // [!code ++]\n  \n  private getRequiredEnvVar(name: string): string { // [!code ++]\n    const value = process.env[name]; // [!code ++]\n    if (!value) { // [!code ++]\n      throw new Error(`Variável de ambiente obrigatória em falta: ${name}`); // [!code ++]\n    } // [!code ++]\n    return value; // [!code ++]\n  } // [!code ++]\n}"
    },
    "avoidNPlusOne": {
      "before": "// ❌ Problema N+1: uma consulta por cada post\nclass PostService {\n  async getPostsWithAuthors(): Promise<PostWithAuthor[]> {\n    const posts = await db.posts.findMany({\n      where: { published: true },\n      orderBy: { createdAt: 'desc' }\n    });\n    \n    // Problema N+1! Uma consulta por cada post\n    const postsWithAuthors = [];\n    for (const post of posts) {\n      const author = await db.users.findUnique({\n        where: { id: post.authorId },\n        select: { id: true, name: true, email: true }\n      });\n      \n      postsWithAuthors.push({\n        ...post,\n        author\n      });\n    }\n    \n    return postsWithAuthors;\n  }\n  \n  async getPostsWithComments(): Promise<PostWithComments[]> {\n    const posts = await db.posts.findMany();\n    \n    // Novamente N+1 para comentários\n    for (const post of posts) {\n      post.comments = await db.comments.findMany({\n        where: { postId: post.id }\n      });\n    }\n    \n    return posts;\n  }\n}",
      "after": "// ✅ Consultas otimizadas com joins/includes\nclass PostService {\n  async getPostsWithAuthors(): Promise<PostWithAuthor[]> { // [!code ++]\n    return db.posts.findMany({ // [!code ++]\n      where: { published: true }, // [!code ++]\n      orderBy: { createdAt: 'desc' }, // [!code ++]\n      include: { // [!code focus]\n        author: { // [!code focus]\n          select: { // [!code focus]\n            id: true, // [!code focus]\n            name: true, // [!code focus]\n            email: true // [!code focus]\n          } // [!code focus]\n        } // [!code focus]\n      } // [!code focus]\n    }); // [!code ++]\n  } // [!code ++]\n  \n  async getPostsWithComments(): Promise<PostWithComments[]> { // [!code ++]\n    return db.posts.findMany({ // [!code ++]\n      include: { // [!code focus]\n        author: { // [!code focus]\n          select: { id: true, name: true } // [!code focus]\n        }, // [!code focus]\n        comments: { // [!code focus]\n          include: { // [!code focus]\n            author: { // [!code focus]\n              select: { id: true, name: true } // [!code focus]\n            } // [!code focus]\n          } // [!code focus]\n        } // [!code focus]\n      } // [!code focus]\n    }); // [!code ++]\n  } // [!code ++]\n  \n  async getPostsWithStats(): Promise<PostWithStats[]> { // [!code ++]\n    return db.posts.findMany({ // [!code ++]\n      include: { // [!code ++]\n        _count: { // [!code focus]\n          select: { // [!code focus]\n            comments: true, // [!code focus]\n            likes: true // [!code focus]\n          } // [!code focus]\n        } // [!code focus]\n      } // [!code ++]\n    }); // [!code ++]\n  } // [!code ++]\n}"
    },
    "efficientCaching": {
      "before": "// ❌ Sem cache - consultas caras repetidas\nclass ProductService {\n  async getProduct(id: number): Promise<Product> {\n    // Vai sempre à base de dados\n    const product = await db.products.findUnique({\n      where: { id },\n      include: {\n        category: true,\n        reviews: {\n          include: { user: true }\n        },\n        variants: true\n      }\n    });\n    \n    if (!product) {\n      throw new Error('Product not found');\n    }\n    \n    // Cálculo caro que se repete\n    const averageRating = product.reviews.reduce((sum, review) => \n      sum + review.rating, 0) / product.reviews.length;\n    \n    const totalStock = product.variants.reduce((sum, variant) => \n      sum + variant.stock, 0);\n    \n    return {\n      ...product,\n      averageRating,\n      totalStock,\n      isAvailable: totalStock > 0\n    };\n  }\n  \n  async getPopularProducts(): Promise<Product[]> {\n    // Consulta pesada sem cache\n    return db.products.findMany({\n      where: { featured: true },\n      include: { reviews: true, category: true },\n      orderBy: { viewCount: 'desc' },\n      take: 10\n    });\n  }\n}",
      "after": "// ✅ Com cache inteligente e estratificado\nclass ProductService {\n  constructor( // [!code ++]\n    private cache: CacheService, // [!code ++]\n    private db: DatabaseService // [!code ++]\n  ) {} // [!code ++]\n  \n  async getProduct(id: number): Promise<Product> { // [!code ++]\n    const cacheKey = `product:${id}`; // [!code ++]\n    \n    let product = await this.cache.get<Product>(cacheKey); // [!code focus]\n    if (product) { // [!code focus]\n      return product; // [!code focus]\n    } // [!code focus]\n    \n    product = await this.fetchProductWithCalculations(id); // [!code ++]\n    \n    await this.cache.set(cacheKey, product, { // [!code focus]\n      ttl: 3600, // 1 hora // [!code focus]\n      tags: ['product', `product-${id}`] // [!code focus]\n    }); // [!code focus]\n    \n    return product; // [!code ++]\n  } // [!code ++]\n  \n  async getPopularProducts(): Promise<Product[]> { // [!code ++]\n    const cacheKey = 'products:popular'; // [!code ++]\n    \n    let products = await this.cache.get<Product[]>(cacheKey); // [!code focus]\n    if (products) { // [!code focus]\n      return products; // [!code focus]\n    } // [!code focus]\n    \n    products = await this.db.products.findMany({ // [!code ++]\n      where: { featured: true }, // [!code ++]\n      include: { category: true }, // [!code ++]\n      orderBy: { viewCount: 'desc' }, // [!code ++]\n      take: 10 // [!code ++]\n    }); // [!code ++]\n    \n    await this.cache.set(cacheKey, products, { // [!code focus]\n      ttl: 1800, // 30 minutos // [!code focus]\n      tags: ['products', 'popular'] // [!code focus]\n    }); // [!code focus]\n    \n    return products; // [!code ++]\n  } // [!code ++]\n  \n  async invalidateProductCache(productId: number): Promise<void> { // [!code ++]\n    await this.cache.invalidateByTags([`product-${productId}`, 'popular']); // [!code ++]\n  } // [!code ++]\n}"
    }
  }
}