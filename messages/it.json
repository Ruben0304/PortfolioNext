{
  "HomePage": {
    "title": "Rubén Hernández Acevedo",
    "subtitle": "Sviluppatore Full Stack | App, Web e IA",
    "description": "Specializzato nello sviluppo di applicazioni mobili, soluzioni web moderne e sistemi di intelligenza artificiale. Trasformo idee in esperienze digitali innovative."
  },
  "Navigation": {
    "home": "Home",
    "about": "Chi sono",
    "projects": "Progetti",
    "contact": "Contatto"
  },
  "Language": {
    "switch": "Cambia lingua",
    "selectLanguage": "Seleziona lingua",
    "spanish": "Spagnolo",
    "english": "Inglese",
    "french": "Francese",
    "portuguese": "Portoghese",
    "italian": "Italiano",
    "chinese": "中文"
  },
  "Loader": {
    "loading": "Caricamento..."
  },
  "Projects": {
    "title": "Progetti Realizzati",
    "subtitle": "Esplora alcuni dei progetti più significativi che ho sviluppato, dalle applicazioni web alle soluzioni aziendali.",
    "suncar": {
      "title": "SunCar",
      "description": "Azienda di installazioni fotovoltaiche. Soluzioni innovative in energia solare per case e imprese."
    },
    "playup": {
      "title": "Playup",
      "description": "Gestione di tornei, giocatori e squadre di calcio dilettantistico internazionale. Piattaforma sportiva completa."
    },
    "moneyapp": {
      "title": "MoneyApp",
      "description": "Assistente di finanze personali con IA. Gestisci le tue finanze in modo intelligente e automatizzato."
    },
    "solarsurvivor": {
      "title": "Solar Survivor",
      "description": "Gioco di simulazione di energia solare. Sopravvivi e prospera utilizzando la tecnologia fotovoltaica sostenibile."
    },
    "fintech": {
      "title": "Piattaforma FinTech",
      "description": "Piattaforma finanziaria aziendale con analisi avanzata dei dati e dashboard in tempo reale per la gestione di portafogli."
    }
  },
  "TerminalSection": {
    "title": "Configurazione dell'Ambiente",
    "description": "Installazione delle competenze professionali che fanno la differenza.",
    "success": "Sviluppatore full-stack pronto per la produzione ✨",
    "footer": "Lo sviluppo software è come risolvere puzzle complessi: ogni riga di codice conta."
  },
  "ResponsiveSection": {
    "title": "Design Responsive",
    "description": "Ogni progetto che sviluppo è ottimizzato per funzionare perfettamente su qualsiasi dispositivo, dal mobile al desktop.",
    "footer": "L'esperienza utente è coerente indipendentemente dallo schermo da cui si accede."
  },
  "TabsSection": {
    "title": "Il Mio Stack Tecnologico Preferito",
    "description": "Se dovessi scegliere uno stack tecnologico preferito per sviluppare un progetto completo, questo sarebbe il mio arsenale ideale per creare soluzioni robuste e scalabili.",
    "fastapi": {
      "description": "Framework Python moderno e veloce per creare API robuste con documentazione automatica e validazione dei tipi."
    },
    "nextjs": {
      "description": "Framework React di produzione con rendering ibrido, ottimizzazione automatica ed esperienza di sviluppo superiore."
    },
    "mongodb": {
      "description": "Database NoSQL scalabile e flessibile che permette di gestire grandi volumi di dati con schemi dinamici."
    },
    "kotlin": {
      "description": "Linguaggio moderno per lo sviluppo Android nativo con sintassi concisa e interoperabilità con Java."
    },
    "swift": {
      "description": "Linguaggio potente e intuitivo di Apple per creare applicazioni iOS native ad alte prestazioni."
    },
    "railway": {
      "description": "Piattaforma di deployment moderna che semplifica l'hosting di applicazioni con CI/CD automatico."
    },
    "figma": {
      "description": "Strumento di design collaborativo per creare interfacce utente e prototipi interattivi professionali."
    },
    "claude": {
      "description": "Assistente IA per lo sviluppo che accelera la programmazione con suggerimenti intelligenti e generazione di codice."
    }
  },
  "Technologies": {
    "title": "Competenze Tecniche",
    "description": "La mia esperienza spazia dal design UX/UI all'infrastruttura, permettendomi di guidare progetti end-to-end con una visione integrale dello sviluppo.",
    "techCount": "Tecnologie",
    "yearsExp": "Anni di esperienza",
    "additionalInfo": "Il mio stack evolve costantemente, esplorando sempre nuovi strumenti che mi permettono di creare soluzioni migliori e rimanere aggiornato con le ultime tendenze dello sviluppo.",
    "centerText": "Stack Tech",
    "frontend": {
      "title": "Frontend",
      "description": "Interfacce moderne e responsive con React, Vue, Next.js per esperienze utente eccezionali."
    },
    "backend": {
      "title": "Backend",
      "description": "API robuste e scalabili utilizzando Laravel, FastAPI, Python per sistemi aziendali solidi."
    },
    "mobile": {
      "title": "Mobile",
      "description": "Sviluppo nativo con Kotlin, Swift e multipiattaforma con tecnologie web per applicazioni mobili performanti."
    }
  },
  "ContactSection": {
    "title": "Contattami",
    "description": "Hai un progetto in mente o vuoi collaborare? Mi piacerebbe sentire la tua idea e aiutarti a trasformarla in realtà.",
    "availableTitle": "Disponibile per progetti",
    "availableDescription": "Attualmente accetto nuovi progetti e collaborazioni. Non esitare a contattarmi per discutere il tuo prossimo sviluppo."
  },
  "Actions": {
    "downloadCV": "Scarica CV",
    "viewGitHub": "Vedi GitHub"
  },
  "CVDialog": {
    "title": "CV non disponibile",
    "description": "Ciao! Il mio CV non è ancora disponibile per il download, ma lo sarà molto presto. Ti invito a tornare presto per ottenerlo.",
    "actionText": "Capito",
    "close": "Chiudi"
  },
  "BestPractices": {
    "title": "Migliori Pratiche di Sviluppo",
    "subtitle": "Esempi reali di principi SOLID, Clean Code, Sicurezza e Prestazioni che applico nei miei progetti per creare codice manutenibile e scalabile.",
    "description": "Queste pratiche garantiscono che il codice sia facile da mantenere, testare ed estendere, risultando in applicazioni più robuste e team di sviluppo più produttivi.",
    "practices": "Principi",
    "selectFile": "Seleziona un file per vedere l'esempio",
    "files": {
      "singleResponsibility": "ResponsabilitaSingola.ts",
      "openClosed": "ApertoChiuso.ts", 
      "dependencyInversion": "InversioneDipendenze.ts",
      "meaningfulNames": "NomiSignificativi.ts",
      "smallFunctions": "FunzioniPiccole.ts",
      "avoidComments": "CodiceAutoDocumentato.ts",
      "inputValidation": "ValidazioneInput.ts",
      "secureSecrets": "GestioneSegreti.ts",
      "avoidNPlusOne": "EvitareNPiuUno.ts",
      "efficientCaching": "CacheEfficiente.ts"
    },
    "examples": {
      "single-responsibility": {
        "title": "Principio di Responsabilità Singola",
        "description": "Ogni classe dovrebbe avere una sola ragione per cambiare. Separiamo le responsabilità in classi specializzate."
      },
      "open-closed": {
        "title": "Principio Aperto/Chiuso",
        "description": "Le entità dovrebbero essere aperte per l'estensione ma chiuse per la modifica. Usiamo astrazioni per nuove funzionalità."
      },
      "dependency-inversion": {
        "title": "Principio di Inversione delle Dipendenze",
        "description": "Dipendiamo da astrazioni, non da implementazioni concrete. Questo facilita i test e la flessibilità."
      },
      "meaningful-names": {
        "title": "Nomi Significativi",
        "description": "Usare nomi descrittivi e chiari che esprimano l'intenzione del codice, eliminando la necessità di commenti esplicativi."
      },
      "small-functions": {
        "title": "Funzioni Piccole",
        "description": "Dividere funzioni grandi in funzioni piccole e specializzate che svolgono un singolo compito efficacemente."
      },
      "avoid-comments": {
        "title": "Codice Auto-Documentato",
        "description": "Scrivere codice che si spiega da solo attraverso nomi chiari e struttura logica, minimizzando i commenti."
      },
      "input-validation": {
        "title": "Validazione Input",
        "description": "Implementare validazione e sanificazione rigorose dei dati in input per prevenire vulnerabilità di sicurezza."
      },
      "secure-secrets": {
        "title": "Gestione Sicura dei Segreti",
        "description": "Gestire credenziali e segreti in modo sicuro usando variabili d'ambiente e servizi specializzati."
      },
      "avoid-n-plus-1": {
        "title": "Evitare Query N+1",
        "description": "Ottimizzare le query del database per evitare il problema N+1 usando join e include efficienti."
      },
      "efficient-caching": {
        "title": "Cache Efficiente",
        "description": "Implementare strategie di cache intelligenti per migliorare le prestazioni e ridurre il carico sul database."
      }
    }
  },
  "CodeExamples": {
    "singleResponsibility": {
      "before": "// ❌ Viola il principio di responsabilità singola\nclass UserService {\n  async createUser(userData: any) {\n    // Validazione\n    if (!userData.email || !userData.password) {\n      throw new Error('Email and password are required');\n    }\n    \n    // Invio email\n    await this.sendWelcomeEmail(userData.email);\n    \n    // Salvataggio nel database\n    const user = await db.users.create(userData);\n    \n    // Logging\n    console.log(`User created: ${user.id}`);\n    \n    return user;\n  }\n  \n  private async sendWelcomeEmail(email: string) {\n    // Logica invio email\n  }\n}",
      "after": "// ✅ Rispetta il principio di responsabilità singola\nclass UserService {\n  constructor(\n    private validator: UserValidator, // [!code ++]\n    private emailService: EmailService, // [!code ++]\n    private userRepository: UserRepository, // [!code ++]\n    private logger: Logger // [!code ++]\n  ) {}\n\n  async createUser(userData: any): Promise<User> {\n    this.validator.validate(userData); // [!code focus]\n    \n    const user = await this.userRepository.create(userData); // [!code focus]\n    \n    await this.emailService.sendWelcomeEmail(user.email); // [!code focus]\n    this.logger.log(`User created: ${user.id}`); // [!code focus]\n    \n    return user;\n  }\n}\n\nclass UserValidator { // [!code ++]\n  validate(userData: any): void { // [!code ++]\n    if (!userData.email || !userData.password) { // [!code ++]\n      throw new Error('Email and password are required'); // [!code ++]\n    } // [!code ++]\n  } // [!code ++]\n} // [!code ++]"
    },
    "openClosed": {
      "before": "// ❌ Viola il principio aperto/chiuso\nclass PaymentProcessor {\n  processPayment(amount: number, method: string) {\n    if (method === 'credit-card') {\n      return this.processCreditCard(amount);\n    } else if (method === 'paypal') {\n      return this.processPaypal(amount);\n    } else if (method === 'bank-transfer') {\n      return this.processBankTransfer(amount);\n    }\n    throw new Error('Unsupported payment method');\n  }\n  \n  private processCreditCard(amount: number) {\n    // Logica carta di credito\n  }\n  \n  private processPaypal(amount: number) {\n    // Logica PayPal\n  }\n  \n  private processBankTransfer(amount: number) {\n    // Logica bonifico bancario\n  }\n}",
      "after": "// ✅ Rispetta il principio aperto/chiuso\ninterface PaymentMethod { // [!code ++]\n  process(amount: number): Promise<PaymentResult>; // [!code ++]\n} // [!code ++]\n\nclass CreditCardPayment implements PaymentMethod { // [!code ++]\n  async process(amount: number): Promise<PaymentResult> { // [!code ++]\n    // Logica specifica per carta di credito // [!code ++]\n    return { success: true, transactionId: 'cc_123' }; // [!code ++]\n  } // [!code ++]\n} // [!code ++]\n\nclass PaypalPayment implements PaymentMethod { // [!code ++]\n  async process(amount: number): Promise<PaymentResult> { // [!code ++]\n    // Logica specifica per PayPal // [!code ++]\n    return { success: true, transactionId: 'pp_456' }; // [!code ++]\n  } // [!code ++]\n} // [!code ++]\n\nclass PaymentProcessor {\n  constructor(private paymentMethod: PaymentMethod) {} // [!code focus]\n  \n  async processPayment(amount: number): Promise<PaymentResult> { // [!code focus]\n    return await this.paymentMethod.process(amount); // [!code focus]\n  } // [!code focus]\n}"
    },
    "dependencyInversion": {
      "before": "// ❌ Viola il principio di inversione delle dipendenze\nimport { MySQLDatabase } from './MySQLDatabase';\nimport { EmailProvider } from './EmailProvider';\n\nclass OrderService {\n  private database: MySQLDatabase;\n  private emailProvider: EmailProvider;\n  \n  constructor() {\n    this.database = new MySQLDatabase(); // Dipendenza diretta\n    this.emailProvider = new EmailProvider(); // Dipendenza diretta\n  }\n  \n  async createOrder(orderData: any) {\n    const order = await this.database.save(orderData);\n    await this.emailProvider.sendConfirmation(order.customerEmail);\n    return order;\n  }\n}",
      "after": "// ✅ Rispetta il principio di inversione delle dipendenze\ninterface Database { // [!code ++]\n  save(data: any): Promise<any>; // [!code ++]\n} // [!code ++]\n\ninterface NotificationService { // [!code ++]\n  sendConfirmation(email: string): Promise<void>; // [!code ++]\n} // [!code ++]\n\nclass OrderService {\n  constructor(\n    private database: Database, // Astrazione // [!code focus]\n    private notificationService: NotificationService // Astrazione // [!code focus]\n  ) {}\n  \n  async createOrder(orderData: any) {\n    const order = await this.database.save(orderData); // [!code focus]\n    await this.notificationService.sendConfirmation(order.customerEmail); // [!code focus]\n    return order;\n  }\n}\n\n// Implementazioni concrete // [!code ++]\nclass MySQLDatabase implements Database { // [!code ++]\n  async save(data: any): Promise<any> { // [!code ++]\n    // Implementazione specifica MySQL // [!code ++]\n  } // [!code ++]\n} // [!code ++]\n\nclass EmailNotificationService implements NotificationService { // [!code ++]\n  async sendConfirmation(email: string): Promise<void> { // [!code ++]\n    // Implementazione specifica email // [!code ++]\n  } // [!code ++]\n} // [!code ++]"
    },
    "meaningfulNames": {
      "before": "// ❌ Nomi poco descrittivi\nclass Calc {\n  private data: any[] = [];\n  \n  process(d: any): number {\n    let r = 0;\n    let t = 0;\n    \n    for (let i = 0; i < d.length; i++) {\n      if (d[i].type === 1) {\n        r += d[i].amt * d[i].qty;\n        t += d[i].amt * d[i].qty * 0.15;\n      }\n    }\n    \n    return r + t;\n  }\n  \n  validate(x: any): boolean {\n    return x && x.amt > 0 && x.qty > 0;\n  }\n}",
      "after": "// ✅ Nomi descrittivi e significativi\nclass ProductPriceCalculator { // [!code ++]\n  private products: Product[] = []; // [!code ++]\n  \n  calculateTotalPrice(products: Product[]): number { // [!code ++]\n    let sottotale = 0; // [!code ++]\n    let tasse = 0; // [!code ++]\n    \n    for (const prodotto of products) { // [!code ++]\n      if (prodotto.isActive) { // [!code ++]\n        const totaleArticolo = prodotto.price * prodotto.quantity; // [!code ++]\n        sottotale += totaleArticolo; // [!code ++]\n        tasse += totaleArticolo * ALIQUOTA_TASSE; // [!code ++]\n      } // [!code ++]\n    } // [!code ++]\n    \n    return sottotale + tasse; // [!code ++]\n  } // [!code ++]\n  \n  isValidProduct(prodotto: Product): boolean { // [!code ++]\n    return prodotto && prodotto.price > 0 && prodotto.quantity > 0; // [!code ++]\n  } // [!code ++]\n} // [!code ++]\n\nconst ALIQUOTA_TASSE = 0.15; // [!code ++]\n\ninterface Product { // [!code ++]\n  price: number; // [!code ++]\n  quantity: number; // [!code ++]\n  isActive: boolean; // [!code ++]\n} // [!code ++]"
    },
    "smallFunctions": {
      "before": "// ❌ Funzione grande che fa troppe cose\nasync function registerUser(userData: any) {\n  // Validazione\n  if (!userData.email || !userData.email.includes('@')) {\n    throw new Error('Invalid email');\n  }\n  if (!userData.password || userData.password.length < 8) {\n    throw new Error('Password too short');\n  }\n  if (!userData.name || userData.name.trim().length === 0) {\n    throw new Error('Name is required');\n  }\n  \n  // Hash password\n  const salt = await bcrypt.genSalt(10);\n  const hashedPassword = await bcrypt.hash(userData.password, salt);\n  \n  // Crea utente\n  const user = await db.users.create({\n    email: userData.email.toLowerCase(),\n    password: hashedPassword,\n    name: userData.name.trim(),\n    createdAt: new Date()\n  });\n  \n  // Invia email di benvenuto\n  const emailTemplate = `Benvenuto ${user.name}! Grazie per esserti unito a noi.`;\n  await emailService.send(user.email, 'Benvenuto!', emailTemplate);\n  \n  // Log attività\n  await db.logs.create({\n    action: 'USER_REGISTERED',\n    userId: user.id,\n    timestamp: new Date()\n  });\n  \n  return user;\n}",
      "after": "// ✅ Funzioni piccole con responsabilità specifiche\nasync function registerUser(userData: UserRegistrationData): Promise<User> {\n  await validateUserData(userData); // [!code focus]\n  \n  const hashedPassword = await hashPassword(userData.password); // [!code focus]\n  const user = await createUser(userData, hashedPassword); // [!code focus]\n  \n  await sendWelcomeEmail(user); // [!code focus]\n  await logUserRegistration(user.id); // [!code focus]\n  \n  return user;\n}\n\nasync function validateUserData(userData: UserRegistrationData): Promise<void> { // [!code ++]\n  validateEmail(userData.email); // [!code ++]\n  validatePassword(userData.password); // [!code ++]\n  validateName(userData.name); // [!code ++]\n} // [!code ++]\n\nfunction validateEmail(email: string): void { // [!code ++]\n  if (!email || !email.includes('@')) { // [!code ++]\n    throw new Error('Invalid email'); // [!code ++]\n  } // [!code ++]\n} // [!code ++]\n\nasync function hashPassword(password: string): Promise<string> { // [!code ++]\n  const salt = await bcrypt.genSalt(10); // [!code ++]\n  return bcrypt.hash(password, salt); // [!code ++]\n} // [!code ++]\n\nasync function createUser(userData: UserRegistrationData, hashedPassword: string): Promise<User> { // [!code ++]\n  return db.users.create({ // [!code ++]\n    email: userData.email.toLowerCase(), // [!code ++]\n    password: hashedPassword, // [!code ++]\n    name: userData.name.trim(), // [!code ++]\n    createdAt: new Date() // [!code ++]\n  }); // [!code ++]\n} // [!code ++]"
    },
    "avoidComments": {
      "before": "// ❌ Codice che richiede molti commenti per essere compreso\nclass InventoryManager {\n  // Controlla se il prodotto è disponibile\n  check(p: Product, q: number): boolean {\n    // Ottieni il livello di stock corrente\n    const s = this.getStock(p.id);\n    \n    // Controlla se abbiamo abbastanza inventario\n    // Dobbiamo anche considerare gli articoli riservati\n    const r = this.getReserved(p.id);\n    \n    // Disponibile = stock - riservato\n    const a = s - r;\n    \n    // Restituisce true se ne abbiamo abbastanza\n    return a >= q;\n  }\n  \n  // Aggiorna l'inventario quando viene effettuato un ordine\n  update(pid: number, qty: number) {\n    // Ottieni i valori correnti\n    const current = this.inventory[pid];\n    \n    // Sottrai la quantità\n    current.stock -= qty;\n    \n    // Aggiungi ai riservati\n    current.reserved += qty;\n    \n    // Aggiorna timestamp\n    current.lastUpdated = Date.now();\n  }\n}",
      "after": "// ✅ Codice auto-documentato senza bisogno di commenti\nclass InventoryManager {\n  isProductAvailable(prodotto: Product, quantitaRichiesta: number): boolean { // [!code ++]\n    const stockCorrente = this.getCurrentStock(prodotto.id); // [!code ++]\n    const quantitaRiservata = this.getReservedQuantity(prodotto.id); // [!code ++]\n    const quantitaDisponibile = stockCorrente - quantitaRiservata; // [!code ++]\n    \n    return quantitaDisponibile >= quantitaRichiesta; // [!code ++]\n  } // [!code ++]\n  \n  reserveProductForOrder(productId: number, quantita: number): void { // [!code ++]\n    const recordInventario = this.getInventoryRecord(productId); // [!code ++]\n    \n    recordInventario.decreaseStock(quantita); // [!code ++]\n    recordInventario.increaseReserved(quantita); // [!code ++]\n    recordInventario.updateTimestamp(); // [!code ++]\n  } // [!code ++]\n  \n  private getCurrentStock(productId: number): number { // [!code ++]\n    return this.inventory[productId]?.stock ?? 0; // [!code ++]\n  } // [!code ++]\n  \n  private getReservedQuantity(productId: number): number { // [!code ++]\n    return this.inventory[productId]?.reserved ?? 0; // [!code ++]\n  } // [!code ++]\n  \n  private getInventoryRecord(productId: number): InventoryRecord { // [!code ++]\n    return this.inventory[productId]; // [!code ++]\n  } // [!code ++]\n}"
    },
    "inputValidation": {
      "before": "// ❌ Nessuna validazione input - vulnerabile agli attacchi\nclass AuthController {\n  async login(req: any, res: any) {\n    const { email, password } = req.body;\n    \n    // Cerca utente direttamente senza validazione\n    const user = await db.query(\n      `SELECT * FROM users WHERE email = '${email}'`\n    );\n    \n    // Confronta password in testo chiaro\n    if (user && user.password === password) {\n      // Crea token senza validazione\n      const token = jwt.sign({ id: user.id }, 'secret');\n      \n      res.json({ token, user });\n    } else {\n      res.status(401).json({ error: 'Invalid credentials' });\n    }\n  }\n  \n  async updateProfile(req: any, res: any) {\n    const { name, bio } = req.body;\n    \n    // Aggiorna senza sanificare\n    await db.query(\n      `UPDATE users SET name = '${name}', bio = '${bio}' WHERE id = ${req.user.id}`\n    );\n    \n    res.json({ success: true });\n  }\n}",
      "after": "// ✅ Con validazione e sanificazione appropriate\nclass AuthController {\n  async login(req: Request, res: Response) { // [!code ++]\n    const { email, password } = this.validateLoginInput(req.body); // [!code ++]\n    \n    const user = await this.userRepository.findByEmail(email); // [!code ++]\n    \n    if (!user || !await this.passwordService.verify(password, user.hashedPassword)) { // [!code ++]\n      throw new UnauthorizedError('Invalid credentials'); // [!code ++]\n    } // [!code ++]\n    \n    const token = this.tokenService.generateSecureToken(user.id); // [!code ++]\n    \n    res.json({ // [!code ++]\n      token, // [!code ++]\n      user: this.sanitizeUserData(user) // [!code ++]\n    }); // [!code ++]\n  } // [!code ++]\n  \n  async updateProfile(req: Request, res: Response) { // [!code ++]\n    const userId = this.validateUserId(req.user.id); // [!code ++]\n    const { name, bio } = this.validateProfileInput(req.body); // [!code ++]\n    \n    const datiSanificati = { // [!code ++]\n      name: this.sanitizer.cleanString(name), // [!code ++]\n      bio: this.sanitizer.cleanString(bio) // [!code ++]\n    }; // [!code ++]\n    \n    await this.userRepository.updateProfile(userId, datiSanificati); // [!code ++]\n    \n    res.json({ success: true }); // [!code ++]\n  } // [!code ++]\n  \n  private validateLoginInput(body: any): LoginData { // [!code ++]\n    const schema = z.object({ // [!code ++]\n      email: z.string().email().max(255), // [!code ++]\n      password: z.string().min(8).max(128) // [!code ++]\n    }); // [!code ++]\n    \n    return schema.parse(body); // [!code ++]\n  } // [!code ++]\n}"
    },
    "secureSecrets": {
      "before": "// ❌ Segreti hardcodati ed esposti\nclass DatabaseConfig {\n  private connectionString = \"postgresql://admin:password123@localhost:5432/mydb\";\n  \n  private jwtSecret = \"my-super-secret-key\";\n  \n  private apiKeys = {\n    stripe: \"sk_live_abc123def456ghi789\",\n    sendgrid: \"SG.xyz789.abc123def456\",\n    aws: \"AKIAIOSFODNN7EXAMPLE\"\n  };\n  \n  async connect() {\n    console.log(\"Connessione a:\", this.connectionString);\n    return pg.connect(this.connectionString);\n  }\n  \n  generateToken(payload: any) {\n    return jwt.sign(payload, this.jwtSecret, { expiresIn: '24h' });\n  }\n  \n  async sendEmail(to: string, subject: string, body: string) {\n    const client = new SendGrid(this.apiKeys.sendgrid);\n    return client.send({ to, subject, body });\n  }\n}",
      "after": "// ✅ Gestione sicura dei segreti usando variabili d'ambiente\nclass DatabaseConfig {\n  private readonly connectionString: string; // [!code ++]\n  private readonly jwtSecret: string; // [!code ++]\n  private readonly apiKeys: ApiKeys; // [!code ++]\n  \n  constructor() { // [!code ++]\n    this.validateEnvironment(); // [!code ++]\n    \n    this.connectionString = this.buildConnectionString(); // [!code ++]\n    this.jwtSecret = this.getRequiredEnvVar('JWT_SECRET'); // [!code ++]\n    this.apiKeys = this.loadApiKeys(); // [!code ++]\n  } // [!code ++]\n  \n  async connect(): Promise<pg.Client> { // [!code ++]\n    return pg.connect(this.connectionString); // [!code ++]\n  } // [!code ++]\n  \n  generateToken(payload: any): string { // [!code ++]\n    if (!this.jwtSecret) { // [!code ++]\n      throw new Error('JWT secret not configured'); // [!code ++]\n    } // [!code ++]\n    \n    return jwt.sign(payload, this.jwtSecret, { expiresIn: '24h' }); // [!code ++]\n  } // [!code ++]\n  \n  private buildConnectionString(): string { // [!code ++]\n    const host = this.getRequiredEnvVar('DB_HOST'); // [!code ++]\n    const port = this.getRequiredEnvVar('DB_PORT'); // [!code ++]\n    const database = this.getRequiredEnvVar('DB_NAME'); // [!code ++]\n    const username = this.getRequiredEnvVar('DB_USER'); // [!code ++]\n    const password = this.getRequiredEnvVar('DB_PASSWORD'); // [!code ++]\n    \n    return `postgresql://${username}:${password}@${host}:${port}/${database}`; // [!code ++]\n  } // [!code ++]\n  \n  private getRequiredEnvVar(name: string): string { // [!code ++]\n    const value = process.env[name]; // [!code ++]\n    if (!value) { // [!code ++]\n      throw new Error(`Variabile d'ambiente richiesta mancante: ${name}`); // [!code ++]\n    } // [!code ++]\n    return value; // [!code ++]\n  } // [!code ++]\n}"
    },
    "avoidNPlusOne": {
      "before": "// ❌ Problema N+1: una query per ogni post\nclass PostService {\n  async getPostsWithAuthors(): Promise<PostWithAuthor[]> {\n    const posts = await db.posts.findMany({\n      where: { published: true },\n      orderBy: { createdAt: 'desc' }\n    });\n    \n    // Problema N+1! Una query per ogni post\n    const postsWithAuthors = [];\n    for (const post of posts) {\n      const author = await db.users.findUnique({\n        where: { id: post.authorId },\n        select: { id: true, name: true, email: true }\n      });\n      \n      postsWithAuthors.push({\n        ...post,\n        author\n      });\n    }\n    \n    return postsWithAuthors;\n  }\n  \n  async getPostsWithComments(): Promise<PostWithComments[]> {\n    const posts = await db.posts.findMany();\n    \n    // Di nuovo N+1 per i commenti\n    for (const post of posts) {\n      post.comments = await db.comments.findMany({\n        where: { postId: post.id }\n      });\n    }\n    \n    return posts;\n  }\n}",
      "after": "// ✅ Query ottimizzate con join/include\nclass PostService {\n  async getPostsWithAuthors(): Promise<PostWithAuthor[]> { // [!code ++]\n    return db.posts.findMany({ // [!code ++]\n      where: { published: true }, // [!code ++]\n      orderBy: { createdAt: 'desc' }, // [!code ++]\n      include: { // [!code focus]\n        author: { // [!code focus]\n          select: { // [!code focus]\n            id: true, // [!code focus]\n            name: true, // [!code focus]\n            email: true // [!code focus]\n          } // [!code focus]\n        } // [!code focus]\n      } // [!code focus]\n    }); // [!code ++]\n  } // [!code ++]\n  \n  async getPostsWithComments(): Promise<PostWithComments[]> { // [!code ++]\n    return db.posts.findMany({ // [!code ++]\n      include: { // [!code focus]\n        author: { // [!code focus]\n          select: { id: true, name: true } // [!code focus]\n        }, // [!code focus]\n        comments: { // [!code focus]\n          include: { // [!code focus]\n            author: { // [!code focus]\n              select: { id: true, name: true } // [!code focus]\n            } // [!code focus]\n          } // [!code focus]\n        } // [!code focus]\n      } // [!code focus]\n    }); // [!code ++]\n  } // [!code ++]\n  \n  async getPostsWithStats(): Promise<PostWithStats[]> { // [!code ++]\n    return db.posts.findMany({ // [!code ++]\n      include: { // [!code ++]\n        _count: { // [!code focus]\n          select: { // [!code focus]\n            comments: true, // [!code focus]\n            likes: true // [!code focus]\n          } // [!code focus]\n        } // [!code focus]\n      } // [!code ++]\n    }); // [!code ++]\n  } // [!code ++]\n}"
    },
    "efficientCaching": {
      "before": "// ❌ Nessuna cache - query costose ripetute\nclass ProductService {\n  async getProduct(id: number): Promise<Product> {\n    // Va sempre al database\n    const product = await db.products.findUnique({\n      where: { id },\n      include: {\n        category: true,\n        reviews: {\n          include: { user: true }\n        },\n        variants: true\n      }\n    });\n    \n    if (!product) {\n      throw new Error('Product not found');\n    }\n    \n    // Calcolo costoso che si ripete\n    const averageRating = product.reviews.reduce((sum, review) => \n      sum + review.rating, 0) / product.reviews.length;\n    \n    const totalStock = product.variants.reduce((sum, variant) => \n      sum + variant.stock, 0);\n    \n    return {\n      ...product,\n      averageRating,\n      totalStock,\n      isAvailable: totalStock > 0\n    };\n  }\n  \n  async getPopularProducts(): Promise<Product[]> {\n    // Query pesante senza cache\n    return db.products.findMany({\n      where: { featured: true },\n      include: { reviews: true, category: true },\n      orderBy: { viewCount: 'desc' },\n      take: 10\n    });\n  }\n}",
      "after": "// ✅ Con cache intelligente e stratificata\nclass ProductService {\n  constructor( // [!code ++]\n    private cache: CacheService, // [!code ++]\n    private db: DatabaseService // [!code ++]\n  ) {} // [!code ++]\n  \n  async getProduct(id: number): Promise<Product> { // [!code ++]\n    const cacheKey = `product:${id}`; // [!code ++]\n    \n    let product = await this.cache.get<Product>(cacheKey); // [!code focus]\n    if (product) { // [!code focus]\n      return product; // [!code focus]\n    } // [!code focus]\n    \n    product = await this.fetchProductWithCalculations(id); // [!code ++]\n    \n    await this.cache.set(cacheKey, product, { // [!code focus]\n      ttl: 3600, // 1 ora // [!code focus]\n      tags: ['product', `product-${id}`] // [!code focus]\n    }); // [!code focus]\n    \n    return product; // [!code ++]\n  } // [!code ++]\n  \n  async getPopularProducts(): Promise<Product[]> { // [!code ++]\n    const cacheKey = 'products:popular'; // [!code ++]\n    \n    let products = await this.cache.get<Product[]>(cacheKey); // [!code focus]\n    if (products) { // [!code focus]\n      return products; // [!code focus]\n    } // [!code focus]\n    \n    products = await this.db.products.findMany({ // [!code ++]\n      where: { featured: true }, // [!code ++]\n      include: { category: true }, // [!code ++]\n      orderBy: { viewCount: 'desc' }, // [!code ++]\n      take: 10 // [!code ++]\n    }); // [!code ++]\n    \n    await this.cache.set(cacheKey, products, { // [!code focus]\n      ttl: 1800, // 30 minuti // [!code focus]\n      tags: ['products', 'popular'] // [!code focus]\n    }); // [!code focus]\n    \n    return products; // [!code ++]\n  } // [!code ++]\n  \n  async invalidateProductCache(productId: number): Promise<void> { // [!code ++]\n    await this.cache.invalidateByTags([`product-${productId}`, 'popular']); // [!code ++]\n  } // [!code ++]\n}"
    }
  }
}